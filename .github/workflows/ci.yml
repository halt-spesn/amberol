# SPDX-FileCopyrightText: 2022  Emmanuele Bassi
# SPDX-License-Identifier: GPL-3.0-or-later

name: Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gtk4
          mingw-w64-x86_64-libadwaita
          mingw-w64-x86_64-gstreamer
          mingw-w64-x86_64-gst-plugins-base
          mingw-w64-x86_64-gst-plugins-good
          mingw-w64-x86_64-gst-plugins-bad
          mingw-w64-x86_64-gst-plugins-ugly
          mingw-w64-x86_64-gst-libav
          mingw-w64-x86_64-rust
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs

    - name: Build Static Version
      shell: pwsh
      run: |
        # Set environment for static linking
        $env:PKG_CONFIG_ALL_STATIC = "1"
        $env:PKG_CONFIG_ALLOW_CROSS = "1"
        $env:GSTREAMER_1_0_STATIC = "1"
        $env:GTK4_STATIC = "1"
        $env:RUSTFLAGS = "-C target-feature=+crt-static -C link-arg=-static -C link-arg=-static-libgcc -C link-arg=-static-libstdc++"
        
        # Configure for static build
        meson setup _build_static --buildtype=release --default-library=static --prefer-static
        
        # Build
        meson compile -C _build_static

    - name: Create Static Distribution
      shell: pwsh
      run: |
        # Create static distribution directory
        $distDir = "amberol-windows-static"
        $binDir = "$distDir\bin"
        
        New-Item -ItemType Directory -Force -Path $binDir
        
        # Copy the statically linked executable
        Copy-Item "_build_static\src\amberol.exe" $binDir -Force
        
        # Copy documentation files
        Copy-Item "README-Windows.md" $distDir -Force
        Copy-Item "LICENSES\GPL-3.0-or-later.txt" "$distDir\LICENSE.txt" -Force
        
        # Create simple launcher for static build
        $staticLauncher = @"
        @echo off
        REM Amberol Static Build - No DLL dependencies required
        
        setlocal
        set AMBEROL_DIR=%~dp0
        
        if not defined LOCALAPPDATA (
            set LOCALAPPDATA=%USERPROFILE%\AppData\Local
        )
        
        if not exist "%LOCALAPPDATA%\io.bassi.Amberol" (
            mkdir "%LOCALAPPDATA%\io.bassi.Amberol"
        )
        
        echo Starting Amberol (Static Build)...
        "%AMBEROL_DIR%bin\amberol.exe" %*
        
        if %ERRORLEVEL% neq 0 (
            echo.
            echo Error: Amberol failed to start
            echo This is a static build - no external DLLs required
            echo Please check Windows compatibility (Windows 10/11)
            pause
        )
        endlocal
        "@
        
        Set-Content -Path "$distDir\amberol-static.bat" -Value $staticLauncher
        
        # Check executable size and dependencies
        $exeSize = (Get-Item "$binDir\amberol.exe").Length / 1MB
        Write-Host "Static executable size: $($exeSize.ToString('F2')) MB"
        
        # Show dependencies (should be minimal for static build)
        if (Get-Command objdump -ErrorAction SilentlyContinue) {
            Write-Host "Checking dependencies:"
            objdump -p "$binDir\amberol.exe" | Select-String "DLL Name:" | Select-Object -First 10
        }

    - name: Build Portable Version
      run: |
        # Configure for portable build (with DLLs)
        meson setup _build_portable --buildtype=release
        meson compile -C _build_portable

    - name: Create Portable Distribution
      shell: pwsh
      run: |
        # Create portable distribution directory
        $distDir = "amberol-windows-portable"
        $binDir = "$distDir\bin"
        $libDir = "$distDir\lib"
        $shareDir = "$distDir\share"
        
        New-Item -ItemType Directory -Force -Path $binDir, $libDir, $shareDir
        
        # Copy main executable
        Copy-Item "_build_portable\src\amberol.exe" $binDir
        
        # Copy required DLLs
        $dllsNeeded = @(
          "libgtk-4-1.dll",
          "libadwaita-1-0.dll",
          "libgstreamer-1.0-0.dll",
          "libgstbase-1.0-0.dll",
          "libgstaudio-1.0-0.dll",
          "libgstplayer-1.0-0.dll",
          "libglib-2.0-0.dll",
          "libgobject-2.0-0.dll",
          "libgio-2.0-0.dll",
          "libcairo-2.dll",
          "libpango-1.0-0.dll",
          "libharfbuzz-0.dll",
          "libfreetype-6.dll",
          "libfontconfig-1.dll",
          "libexpat-1.dll",
          "libbrotlidec.dll",
          "libbrotlicommon.dll",
          "libpng16-16.dll",
          "libffi-7.dll",
          "libintl-8.dll",
          "libiconv-2.dll",
          "libpcre-1.dll",
          "zlib1.dll",
          "libwinpthread-1.dll",
          "libgcc_s_seh-1.dll",
          "libstdc++-6.dll"
        )
        
        foreach ($dll in $dllsNeeded) {
          $source = "C:\msys64\mingw64\bin\$dll"
          if (Test-Path $source) {
            Copy-Item $source $binDir -Force
          }
        }
        
        # Copy GStreamer plugins
        $gstPluginDir = "C:\msys64\mingw64\lib\gstreamer-1.0"
        if (Test-Path $gstPluginDir) {
          Copy-Item $gstPluginDir "$libDir\gstreamer-1.0" -Recurse -Force
        }
        
        # Copy application resources
        Copy-Item "_build_portable\data\*.gresource" $shareDir -ErrorAction SilentlyContinue
        
        # Copy launcher script and docs
        Copy-Item "amberol.bat" $distDir -Force
        Copy-Item "README-Windows.md" $distDir -Force
        Copy-Item "LICENSES\GPL-3.0-or-later.txt" "$distDir\LICENSE.txt" -Force

    - name: Create Distribution Packages
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path dist
        
        # Create static build ZIP (single executable, larger size)
        Compress-Archive -Path "amberol-windows-static\*" -DestinationPath "dist\amberol-windows-static.zip"
        
        # Create portable build ZIP (multiple files, smaller executable)
        Compress-Archive -Path "amberol-windows-portable\*" -DestinationPath "dist\amberol-windows-portable.zip"
        
        # Show package sizes
        $staticSize = (Get-Item "dist\amberol-windows-static.zip").Length / 1MB
        $portableSize = (Get-Item "dist\amberol-windows-portable.zip").Length / 1MB
        $staticExeSize = (Get-Item "amberol-windows-static\bin\amberol.exe").Length / 1MB
        $portableExeSize = (Get-Item "amberol-windows-portable\bin\amberol.exe").Length / 1MB
        
        Write-Host "ðŸ“¦ Package Summary:" -ForegroundColor Green
        Write-Host "Static Package: $($staticSize.ToString('F2')) MB (exe: $($staticExeSize.ToString('F2')) MB)" -ForegroundColor Yellow
        Write-Host "Portable Package: $($portableSize.ToString('F2')) MB (exe: $($portableExeSize.ToString('F2')) MB)" -ForegroundColor Yellow

    - name: Upload Windows Builds
      uses: actions/upload-artifact@v4
      with:
        name: amberol-windows
        path: dist/