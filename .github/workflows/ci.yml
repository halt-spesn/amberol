# SPDX-FileCopyrightText: 2022  Emmanuele Bassi
# SPDX-License-Identifier: GPL-3.0-or-later

name: Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows-portable:
    name: Build Windows (Self-Contained Portable)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gtk4
          mingw-w64-x86_64-libadwaita
          mingw-w64-x86_64-gstreamer
          mingw-w64-x86_64-gst-plugins-base
          mingw-w64-x86_64-gst-plugins-good
          mingw-w64-x86_64-gst-plugins-bad
          mingw-w64-x86_64-gst-plugins-ugly
          mingw-w64-x86_64-gst-libav
          mingw-w64-x86_64-rust
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs

    - name: Create Portable Build with All DLLs
      run: |
        echo "üèóÔ∏è Creating comprehensive portable build with all dependencies..."
        
        # Set up for dynamic linking (accepting that true static isn't feasible)
        export PKG_CONFIG_PATH="/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig"
        
        echo "üîß Configuring for portable build..."
        meson setup _build --buildtype=release
        
        echo "üèóÔ∏è Building..."
        meson compile -C _build
        
        echo "‚úÖ Build completed!"

    - name: Create Self-Contained Portable Distribution
      shell: pwsh
      run: |
        # Create distribution directory
        $distDir = "amberol-windows-static"
        $binDir = "$distDir\bin"
        $libDir = "$distDir\lib"
        $shareDir = "$distDir\share"
        
        New-Item -ItemType Directory -Force -Path $binDir, $libDir, $shareDir
        
        Write-Host "üìÅ Creating self-contained portable distribution..." -ForegroundColor Green
        
        # Copy main executable
        Copy-Item "_build\src\amberol.exe" $binDir -Force
        
        # Find the correct MSYS2 path
        $msys2Paths = @(
          "D:\a\_temp\msys64\mingw64\bin",
          "C:\msys64\mingw64\bin",
          "/d/a/_temp/msys64/mingw64/bin"
        )
        
        $msys2BinPath = $null
        foreach ($path in $msys2Paths) {
          if (Test-Path $path) {
            $msys2BinPath = $path
            Write-Host "‚úÖ Found MSYS2 bin directory: $path" -ForegroundColor Green
            break
          }
        }
        
        if (-not $msys2BinPath) {
          Write-Host "‚ùå Could not find MSYS2 bin directory. Checking common locations..." -ForegroundColor Red
          Get-ChildItem "D:\" -Name "*msys*" -Directory -ErrorAction SilentlyContinue
          Get-ChildItem "C:\" -Name "*msys*" -Directory -ErrorAction SilentlyContinue
          exit 1
        }
        
        # List what DLLs are actually available
        Write-Host "üîç Available GTK/GStreamer DLLs in $msys2BinPath:" -ForegroundColor Blue
        Get-ChildItem "$msys2BinPath" -Filter "*gtk*.dll" | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
        Get-ChildItem "$msys2BinPath" -Filter "*adwaita*.dll" | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
        Get-ChildItem "$msys2BinPath" -Filter "*gst*.dll" | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
        
        # Copy ALL possible DLLs to ensure it's truly portable
        Write-Host "üì¶ Copying comprehensive DLL set..." -ForegroundColor Blue
        $allDlls = @(
          # Core GTK4/libadwaita
          "libgtk-4-1.dll", "libadwaita-1-0.dll", "libgraphene-1.0-0.dll",
          
          # GStreamer audio
          "libgstreamer-1.0-0.dll", "libgstbase-1.0-0.dll", "libgstaudio-1.0-0.dll", 
          "libgstplayer-1.0-0.dll", "libgstvideo-1.0-0.dll", "libgstpbutils-1.0-0.dll",
          "libgsttag-1.0-0.dll", "libgstapp-1.0-0.dll",
          
          # Core GLib/GObject
          "libglib-2.0-0.dll", "libgobject-2.0-0.dll", "libgio-2.0-0.dll",
          "libgmodule-2.0-0.dll", "libgthread-2.0-0.dll",
          
          # Graphics and rendering
          "libcairo-2.dll", "libcairo-gobject-2.dll", "libpango-1.0-0.dll",
          "libpangocairo-1.0-0.dll", "libpangowin32-1.0-0.dll", "libpangoft2-1.0-0.dll",
          "libharfbuzz-0.dll", "libfreetype-6.dll", "libfontconfig-1.dll",
          "libpixman-1-0.dll", "librsvg-2-2.dll",
          
          # Image formats
          "libpng16-16.dll", "libjpeg-8.dll", "libtiff-5.dll", "libwebp-7.dll",
          "libwebpmux-3.dll", "libwebpdemux-2.dll",
          
          # Text and internationalization
          "libintl-8.dll", "libiconv-2.dll", "libfribidi-0.dll",
          
          # XML and data
          "libxml2-2.dll", "libexpat-1.dll", "liblzma-5.dll", "libbz2-1.dll",
          
          # Compression
          "zlib1.dll", "libbrotlidec.dll", "libbrotlicommon.dll", "libbrotlienc.dll",
          
          # SSL/Network (if needed)
          "libssl-3-x64.dll", "libcrypto-3-x64.dll",
          
          # Audio formats and codecs
          "libvorbis-0.dll", "libvorbisenc-2.dll", "libvorbisfile-3.dll",
          "libogg-0.dll", "libopus-0.dll", "libopusfile-0.dll",
          "libFLAC-8.dll", "libsndfile-1.dll", "libmpg123-0.dll",
          
          # System libraries
          "libffi-7.dll", "libpcre-1.dll", "libpcre2-8-0.dll",
          "libwinpthread-1.dll", "libgcc_s_seh-1.dll", "libstdc++-6.dll"
        )
        
        $copiedDlls = 0
        $missingDlls = @()
        
        foreach ($dll in $allDlls) {
          $source = Join-Path $msys2BinPath $dll
          if (Test-Path $source) {
            Copy-Item $source $binDir -Force
            $copiedDlls++
            Write-Host "  ‚úÖ $dll" -ForegroundColor Green
          } else {
            $missingDlls += $dll
            Write-Host "  ‚ùå $dll" -ForegroundColor Red
          }
        }
        
        Write-Host "üìä DLL Copy Results:" -ForegroundColor Yellow
        Write-Host "  Copied: $copiedDlls DLLs" -ForegroundColor Green
        Write-Host "  Missing: $($missingDlls.Count) DLLs" -ForegroundColor Red
        
        # Copy ALL DLLs that match common patterns (backup strategy)
        Write-Host "üîÑ Backup: Copying all matching DLLs by pattern..." -ForegroundColor Blue
        $patterns = @("*gtk*.dll", "*adwaita*.dll", "*gst*.dll", "*glib*.dll", "*gobject*.dll", "*gio*.dll")
        $backupCopied = 0
        
        foreach ($pattern in $patterns) {
          Get-ChildItem "$msys2BinPath" -Filter $pattern | ForEach-Object {
            $targetPath = Join-Path $binDir $_.Name
            if (-not (Test-Path $targetPath)) {
              Copy-Item $_.FullName $binDir -Force
              $backupCopied++
              Write-Host "  üìé $($_.Name)" -ForegroundColor Cyan
            }
          }
        }
        
        Write-Host "‚úÖ Backup strategy copied additional $backupCopied DLLs" -ForegroundColor Cyan
        
        # Use objdump to find ACTUAL dependencies and copy them
        Write-Host "üîç Using objdump to find actual dependencies..." -ForegroundColor Blue
        try {
          $objdumpOutput = & objdump -p "$binDir\amberol.exe" 2>$null | Select-String "DLL Name:"
          $actualDeps = @()
          
          foreach ($line in $objdumpOutput) {
            if ($line -match "DLL Name:\s*(.+)") {
              $dllName = $matches[1].Trim()
              $actualDeps += $dllName
            }
          }
          
          Write-Host "üìã Actual DLL dependencies found: $($actualDeps.Count)" -ForegroundColor Yellow
          $dependencyCopied = 0
          
          foreach ($dep in $actualDeps) {
            $depPath = Join-Path $msys2BinPath $dep
            $targetPath = Join-Path $binDir $dep
            
            if ((Test-Path $depPath) -and (-not (Test-Path $targetPath))) {
              Copy-Item $depPath $binDir -Force
              $dependencyCopied++
              Write-Host "  üéØ $dep (actual dependency)" -ForegroundColor Magenta
            }
          }
          
          Write-Host "‚úÖ Copied $dependencyCopied actual dependencies" -ForegroundColor Magenta
          
        } catch {
          Write-Host "‚ö†Ô∏è Could not run objdump dependency analysis: $_" -ForegroundColor Yellow
        }
        
        # Copy ALL GStreamer plugins
        Write-Host "üì¶ Copying all GStreamer plugins..." -ForegroundColor Blue
        $msys2LibPath = $msys2BinPath -replace "\\bin$", "\lib"
        $gstPluginDir = Join-Path $msys2LibPath "gstreamer-1.0"
        
        Write-Host "üîç Looking for GStreamer plugins in: $gstPluginDir" -ForegroundColor Gray
        if (Test-Path $gstPluginDir) {
          Copy-Item $gstPluginDir "$libDir\gstreamer-1.0" -Recurse -Force
          $pluginCount = (Get-ChildItem "$libDir\gstreamer-1.0" -Filter "*.dll").Count
          Write-Host "‚úÖ Copied $pluginCount GStreamer plugins" -ForegroundColor Green
        } else {
          Write-Host "‚ö†Ô∏è GStreamer plugin directory not found at $gstPluginDir" -ForegroundColor Yellow
          
          # Try alternative locations
          $altPaths = @(
            "D:\a\_temp\msys64\mingw64\lib\gstreamer-1.0",
            "C:\msys64\mingw64\lib\gstreamer-1.0"
          )
          foreach ($altPath in $altPaths) {
            if (Test-Path $altPath) {
              Write-Host "‚úÖ Found GStreamer plugins at alternative location: $altPath" -ForegroundColor Green
              Copy-Item $altPath "$libDir\gstreamer-1.0" -Recurse -Force
              $pluginCount = (Get-ChildItem "$libDir\gstreamer-1.0" -Filter "*.dll").Count
              Write-Host "‚úÖ Copied $pluginCount GStreamer plugins" -ForegroundColor Green
              break
            }
          }
        }
        
        # Copy GLib schemas
        $msys2SharePath = $msys2BinPath -replace "\\bin$", "\share"
        $glibSchemas = Join-Path $msys2SharePath "glib-2.0"
        
        Write-Host "üîç Looking for GLib schemas in: $glibSchemas" -ForegroundColor Gray
        if (Test-Path $glibSchemas) {
          Copy-Item $glibSchemas "$shareDir\glib-2.0" -Recurse -Force
          Write-Host "‚úÖ Copied GLib schemas" -ForegroundColor Green
        } else {
          Write-Host "‚ö†Ô∏è GLib schemas not found at $glibSchemas" -ForegroundColor Yellow
        }
        
        # Copy application resources
        Copy-Item "_build\data\*.gresource" $shareDir -ErrorAction SilentlyContinue
        
        # Copy documentation
        Copy-Item "README-Windows.md" $distDir -Force
        Copy-Item "LICENSES\GPL-3.0-or-later.txt" "$distDir\LICENSE.txt" -Force
        
        # Create enhanced launcher that sets up complete environment
        $launcher = @"
        @echo off
        REM Amberol Portable - Self-Contained with All Dependencies
        REM This version includes ALL required DLLs and should work without external dependencies
        
        setlocal
        set AMBEROL_DIR=%~dp0
        
        REM Set up GStreamer environment
        set GST_PLUGIN_PATH=%AMBEROL_DIR%lib\gstreamer-1.0
        set GST_PLUGIN_SYSTEM_PATH=%AMBEROL_DIR%lib\gstreamer-1.0
        set GST_REGISTRY=%AMBEROL_DIR%gst-registry.bin
        
        REM Set up GLib environment
        set GSETTINGS_SCHEMA_DIR=%AMBEROL_DIR%share\glib-2.0\schemas
        
        REM Add DLL directory to PATH
        set PATH=%AMBEROL_DIR%bin;%PATH%
        
        REM Set GTK preferences
        set GSK_RENDERER=gl
        set GTK_USE_PORTAL=0
        
        REM Set application data directory
        if not defined LOCALAPPDATA (
            set LOCALAPPDATA=%USERPROFILE%\AppData\Local
        )
        
        if not exist "%LOCALAPPDATA%\io.bassi.Amberol" (
            mkdir "%LOCALAPPDATA%\io.bassi.Amberol"
        )
        
        echo Starting Amberol (Self-Contained Portable)...
        echo All dependencies included - no system installation required
        
        "%AMBEROL_DIR%bin\amberol.exe" %*
        
        if %ERRORLEVEL% neq 0 (
            echo.
            echo Error: Amberol failed to start (exit code: %ERRORLEVEL%)
            echo.
            echo This is a self-contained portable build.
            echo Troubleshooting:
            echo 1. Ensure Windows 10 version 1809 or Windows 11
            echo 2. Check Windows Audio service is running
            echo 3. Update audio drivers
            echo 4. Try running as Administrator
            echo 5. Check antivirus isn't blocking the application
            echo.
            echo Debug information:
            echo - GST_PLUGIN_PATH: %GST_PLUGIN_PATH%
            echo - Current directory: %CD%
            echo - PATH: %PATH%
            echo.
            pause
        )
        endlocal
        "@
        
        Set-Content -Path "$distDir\amberol.bat" -Value $launcher
        
        # Calculate total size
        $totalSize = (Get-ChildItem $distDir -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host "üìä Total portable package size: $($totalSize.ToString('F2')) MB" -ForegroundColor Green

    - name: Analyze Portable Build
      shell: pwsh
      run: |
        # Find the executable in the distribution directory
        $exePath = "amberol-windows-static\bin\amberol.exe"
        
        if (Test-Path $exePath) {
            # Get executable size
            $exeSize = (Get-Item $exePath).Length / 1MB
            Write-Host "üìä Executable size: $($exeSize.ToString('F2')) MB" -ForegroundColor Green
            
            # Count included DLLs
            $dllCount = (Get-ChildItem "amberol-windows-static\bin" -Filter "*.dll").Count
            $pluginCount = if (Test-Path "amberol-windows-static\lib\gstreamer-1.0") { 
                (Get-ChildItem "amberol-windows-static\lib\gstreamer-1.0" -Filter "*.dll").Count 
            } else { 0 }
            
            Write-Host "üì¶ Portable Build Analysis:" -ForegroundColor Blue
            Write-Host "  Executable: $($exeSize.ToString('F2')) MB" -ForegroundColor Green
            Write-Host "  DLLs included: $dllCount" -ForegroundColor Green
            Write-Host "  GStreamer plugins: $pluginCount" -ForegroundColor Green
            
            # Calculate total package size
            $totalSize = (Get-ChildItem "amberol-windows-static" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            Write-Host "  Total package: $($totalSize.ToString('F2')) MB" -ForegroundColor Green
            
            # List some key DLLs to verify they're included
            Write-Host "üîç Key dependencies included:" -ForegroundColor Blue
            $keyDlls = @("libgtk-4-1.dll", "libadwaita-1-0.dll", "libgstreamer-1.0-0.dll", "libgstaudio-1.0-0.dll", "libgstplayer-1.0-0.dll")
            foreach ($dll in $keyDlls) {
                $path = "amberol-windows-static\bin\$dll"
                if (Test-Path $path) {
                    $size = [math]::Round((Get-Item $path).Length / 1KB, 1)
                    Write-Host "  ‚úÖ $dll ($size KB)" -ForegroundColor Green
                } else {
                    Write-Host "  ‚ùå $dll (missing)" -ForegroundColor Red
                }
            }
            
            Write-Host "üéØ RESULT: Self-contained portable build created!" -ForegroundColor Green
            Write-Host "   This package should run on Windows 10/11 without any additional dependencies" -ForegroundColor Green
            Write-Host "   Users can simply extract and run amberol.bat" -ForegroundColor Green
            
        } else {
            Write-Error "‚ùå Executable not found at $exePath"
            Write-Host "üîç Checking distribution directory contents:" -ForegroundColor Yellow
            Get-ChildItem "amberol-windows-static" -Recurse | ForEach-Object { Write-Host "  $_" }
        }

    - name: Create Portable Package
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path dist
        
        # Create comprehensive portable build ZIP
        Compress-Archive -Path "amberol-windows-static\*" -DestinationPath "dist\amberol-windows-portable.zip"
        
        # Show package information
        $packageSize = (Get-Item "dist\amberol-windows-portable.zip").Length / 1MB
        $exeSize = (Get-Item "amberol-windows-static\bin\amberol.exe").Length / 1MB
        $dllCount = (Get-ChildItem "amberol-windows-static\bin" -Filter "*.dll").Count
        
        Write-Host "üì¶ Self-Contained Portable Package Summary:" -ForegroundColor Green
        Write-Host "  Package: amberol-windows-portable.zip ($($packageSize.ToString('F2')) MB)" -ForegroundColor Yellow
        Write-Host "  Executable: amberol.exe ($($exeSize.ToString('F2')) MB)" -ForegroundColor Yellow
        Write-Host "  Dependencies: $dllCount DLLs included" -ForegroundColor Yellow
        Write-Host "  Target: Windows 10/11 x64 (no system dependencies)" -ForegroundColor Yellow
        Write-Host "  Installation: Extract and run amberol.bat" -ForegroundColor Yellow

    - name: Upload Portable Build
      uses: actions/upload-artifact@v4
      with:
        name: amberol-windows-portable
        path: dist/