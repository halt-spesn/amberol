# SPDX-FileCopyrightText: 2022  Emmanuele Bassi
# SPDX-License-Identifier: GPL-3.0-or-later

name: Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows-static:
    name: Build Windows (Static)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gtk4
          mingw-w64-x86_64-libadwaita
          mingw-w64-x86_64-gstreamer
          mingw-w64-x86_64-gst-plugins-base
          mingw-w64-x86_64-gst-plugins-good
          mingw-w64-x86_64-gst-plugins-bad
          mingw-w64-x86_64-gst-plugins-ugly
          mingw-w64-x86_64-gst-libav
          mingw-w64-x86_64-rust
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs
          mingw-w64-x86_64-graphene
          mingw-w64-x86_64-cairo
          mingw-w64-x86_64-pango
          mingw-w64-x86_64-glib2
          mingw-w64-x86_64-gobject-introspection

    - name: Attempt to Install Static Libraries
      run: |
        echo "üîç Attempting to install static/development packages..."
        
        # Try to install development packages that might contain static libraries
        pacman -S --noconfirm --needed \
          mingw-w64-x86_64-gtk4-devel \
          mingw-w64-x86_64-libadwaita-devel \
          mingw-w64-x86_64-gstreamer-devel \
          mingw-w64-x86_64-gst-plugins-base-devel \
          mingw-w64-x86_64-graphene-devel \
          mingw-w64-x86_64-cairo-devel \
          mingw-w64-x86_64-pango-devel \
          mingw-w64-x86_64-glib2-devel 2>/dev/null || echo "Some -devel packages not available"
        
        # Check what static libraries we actually have
        echo "üìã Available static libraries in /mingw64/lib:"
        find /mingw64/lib -name "*.a" | grep -E "(gtk|adwaita|gst|graphene)" | head -20 || echo "No matching static libraries found"

    - name: Configure and Build Static Version
      run: |
        echo "üöÄ Using comprehensive static build approach..."
        chmod +x build_true_static.sh
        ./build_true_static.sh

    - name: Create Static Distribution
      shell: pwsh
      run: |
        # Create static distribution directory
        $distDir = "amberol-windows-static"
        $binDir = "$distDir\bin"
        
        New-Item -ItemType Directory -Force -Path $binDir
        
        # Copy the statically linked executable
        Copy-Item "_build\src\amberol.exe" $binDir -Force
        
        # Copy documentation files
        Copy-Item "README-Windows.md" $distDir -Force
        Copy-Item "LICENSES\GPL-3.0-or-later.txt" "$distDir\LICENSE.txt" -Force
        Copy-Item "README-Windows-Static.md" $distDir -Force
        
        # Create simple launcher for static build
        $staticLauncher = @"
        @echo off
        REM Amberol Static Build - Self-contained executable
        REM All dependencies are statically linked - no external DLLs required
        
        setlocal
        set AMBEROL_DIR=%~dp0
        
        if not defined LOCALAPPDATA (
            set LOCALAPPDATA=%USERPROFILE%\AppData\Local
        )
        
        if not exist "%LOCALAPPDATA%\io.bassi.Amberol" (
            mkdir "%LOCALAPPDATA%\io.bassi.Amberol"
        )
        
        echo Starting Amberol (Static Build - Self-Contained)...
        "%AMBEROL_DIR%bin\amberol.exe" %*
        
        if %ERRORLEVEL% neq 0 (
            echo.
            echo Error: Amberol failed to start (exit code: %ERRORLEVEL%)
            echo.
            echo This is a static build with all dependencies included.
            echo Troubleshooting:
            echo - Ensure Windows 10 version 1809 or Windows 11
            echo - Check that Windows Audio service is running
            echo - Verify audio drivers are properly installed
            echo - Try running as Administrator if needed
            echo.
            pause
        )
        endlocal
        "@
        
        Set-Content -Path "$distDir\amberol.bat" -Value $staticLauncher

    - name: Analyze Static Build
      shell: pwsh
      run: |
        $exePath = "amberol-windows-static\bin\amberol.exe"
        
        if (Test-Path $exePath) {
            # Get executable size
            $exeSize = (Get-Item $exePath).Length / 1MB
            Write-Host "üìä Static executable size: $($exeSize.ToString('F2')) MB" -ForegroundColor Green
            
            # Check dependencies thoroughly
            Write-Host "üîç Analyzing dependencies..." -ForegroundColor Blue
            
            try {
                # Use objdump to check DLL dependencies
                $allDeps = & objdump -p $exePath | Select-String "DLL Name:"
                $problematicDeps = $allDeps | Where-Object { $_ -match "(libgtk|libadwaita|libgst|libgraphene)" }
                
                if ($allDeps) {
                    Write-Host "üìã All runtime dependencies:" -ForegroundColor Yellow
                    $allDeps | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
                    
                    if ($problematicDeps) {
                        Write-Host "‚ùå PROBLEM: Still has dynamic dependencies that should be static:" -ForegroundColor Red
                        $problematicDeps | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
                        Write-Host "üîß These should be statically linked but aren't!" -ForegroundColor Red
                    } else {
                        Write-Host "‚úÖ No problematic GTK/GStreamer DLL dependencies found!" -ForegroundColor Green
                    }
                } else {
                    Write-Host "‚úÖ No DLL dependencies detected - truly static!" -ForegroundColor Green
                }
                
                # Check for Windows system DLLs (these are OK)
                $systemDeps = $allDeps | Where-Object { $_ -match "(kernel32|user32|ntdll|msvcrt)" }
                if ($systemDeps) {
                    Write-Host "‚ÑπÔ∏è System dependencies (normal):" -ForegroundColor Cyan
                    $systemDeps | ForEach-Object { Write-Host "  $_" -ForegroundColor Cyan }
                }
                
            } catch {
                Write-Host "‚ö†Ô∏è Could not analyze dependencies: $_" -ForegroundColor Yellow
                # Fallback: try ldd if available
                try {
                    Write-Host "üîÑ Trying alternative dependency check..." -ForegroundColor Yellow
                    & ldd $exePath | Where-Object { $_ -match "(libgtk|libadwaita|libgst|libgraphene)" }
                } catch {
                    Write-Host "‚ö†Ô∏è Alternative check also failed" -ForegroundColor Yellow
                }
            }
            
            # Check file properties
            Write-Host "üìã File details:" -ForegroundColor Blue
            Write-Host "  Path: $exePath"
            Write-Host "  Size: $($exeSize.ToString('F2')) MB"
            Write-Host "  Type: $(if ($problematicDeps) { 'Partially static (some DLLs still required)' } else { 'Fully static executable' })"
            
            # Size expectations
            if ($exeSize -lt 50) {
                Write-Host "‚ö†Ô∏è WARNING: Executable seems too small for a static build (expected 80-120MB)" -ForegroundColor Yellow
                Write-Host "   This might indicate static linking failed" -ForegroundColor Yellow
            } elseif ($exeSize -gt 200) {
                Write-Host "‚ö†Ô∏è WARNING: Executable seems very large (>200MB)" -ForegroundColor Yellow
                Write-Host "   This might indicate inefficient static linking" -ForegroundColor Yellow
            } else {
                Write-Host "‚úÖ Size looks reasonable for a static build" -ForegroundColor Green
            }
            
        } else {
            Write-Error "‚ùå Static executable not found at $exePath"
        }

    - name: Create Static Package
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path dist
        
        # Create static build ZIP
        Compress-Archive -Path "amberol-windows-static\*" -DestinationPath "dist\amberol-windows-static.zip"
        
        # Show package information
        $packageSize = (Get-Item "dist\amberol-windows-static.zip").Length / 1MB
        $exeSize = (Get-Item "amberol-windows-static\bin\amberol.exe").Length / 1MB
        
        Write-Host "üì¶ Static Build Package Summary:" -ForegroundColor Green
        Write-Host "  Package: amberol-windows-static.zip ($($packageSize.ToString('F2')) MB)" -ForegroundColor Yellow
        Write-Host "  Executable: amberol.exe ($($exeSize.ToString('F2')) MB)" -ForegroundColor Yellow
        Write-Host "  Dependencies: None (fully static)" -ForegroundColor Yellow
        Write-Host "  Target: Windows 10/11 x64" -ForegroundColor Yellow

    - name: Upload Static Build
      uses: actions/upload-artifact@v4
      with:
        name: amberol-windows-static
        path: dist/