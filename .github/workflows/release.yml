# SPDX-FileCopyrightText: 2022  Emmanuele Bassi
# SPDX-License-Identifier: GPL-3.0-or-later

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      version: ${{ steps.tag.outputs.version }}
      is_prerelease: ${{ steps.tag.outputs.is_prerelease }}
    steps:
    - name: Get tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          tag="${{ github.event.inputs.tag }}"
        else
          tag=${GITHUB_REF#refs/tags/}
        fi
        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "version=${tag#v}" >> $GITHUB_OUTPUT
        if [[ $tag =~ -[a-zA-Z] ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

  build-linux:
    name: Build Linux Release
    runs-on: ubuntu-latest
    needs: prepare
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-4-dev \
          libadwaita-1-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav \
          meson \
          ninja-build \
          gettext

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Configure meson
      run: meson setup _build --buildtype=release

    - name: Build
      run: meson compile -C _build

    - name: Create dist
      run: meson dist -C _build --no-tests

    - name: Create Linux tarball
      run: |
        mkdir -p dist
        tar -czf dist/amberol-${{ needs.prepare.outputs.version }}-linux-x86_64.tar.gz \
          -C _build/src amberol \
          -C ../data amberol.gresource

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: amberol-linux-release
        path: dist/

  build-windows:
    name: Build Windows Release
    runs-on: windows-latest
    needs: prepare
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gtk4
          mingw-w64-x86_64-libadwaita
          mingw-w64-x86_64-gstreamer
          mingw-w64-x86_64-gst-plugins-base
          mingw-w64-x86_64-gst-plugins-good
          mingw-w64-x86_64-gst-plugins-bad
          mingw-w64-x86_64-gst-plugins-ugly
          mingw-w64-x86_64-rust
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-desktop-file-utils

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-mingw64-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Configure meson
      run: meson setup _build --buildtype=release

    - name: Build
      run: meson compile -C _build

    - name: Create portable distribution
      shell: pwsh
      run: |
        # Create distribution directory
        $distDir = "amberol-windows-portable"
        $binDir = "$distDir\bin"
        $libDir = "$distDir\lib"
        $shareDir = "$distDir\share"
        
        New-Item -ItemType Directory -Force -Path $binDir, $libDir, $shareDir
        
        # Copy main executable
        Copy-Item "_build\src\amberol.exe" $binDir
        
        # Copy required DLLs
        $dllsNeeded = @(
          "libgtk-4-1.dll",
          "libadwaita-1-0.dll",
          "libgstreamer-1.0-0.dll",
          "libgstbase-1.0-0.dll",
          "libgstaudio-1.0-0.dll",
          "libgstplayer-1.0-0.dll",
          "libglib-2.0-0.dll",
          "libgobject-2.0-0.dll",
          "libgio-2.0-0.dll",
          "libcairo-2.dll",
          "libpango-1.0-0.dll",
          "libharfbuzz-0.dll",
          "libfreetype-6.dll",
          "libfontconfig-1.dll",
          "libexpat-1.dll",
          "libbrotlidec.dll",
          "libbrotlicommon.dll",
          "libpng16-16.dll",
          "libffi-7.dll",
          "libintl-8.dll",
          "libiconv-2.dll",
          "libpcre-1.dll",
          "zlib1.dll",
          "libwinpthread-1.dll",
          "libgcc_s_seh-1.dll",
          "libstdc++-6.dll"
        )
        
        foreach ($dll in $dllsNeeded) {
          $source = "C:\msys64\mingw64\bin\$dll"
          if (Test-Path $source) {
            Copy-Item $source $binDir -Force
          }
        }
        
        # Copy GStreamer plugins
        $gstPluginDir = "C:\msys64\mingw64\lib\gstreamer-1.0"
        if (Test-Path $gstPluginDir) {
          Copy-Item $gstPluginDir "$libDir\gstreamer-1.0" -Recurse -Force
        }
        
        # Copy application resources
        Copy-Item "_build\data\*.gresource" $shareDir -ErrorAction SilentlyContinue
        
        # Copy documentation
        Copy-Item "README-Windows.md" $distDir -Force
        Copy-Item "COPYING" $distDir -Force
        
        # Copy launcher script
        Copy-Item "amberol.bat" $distDir -Force

    - name: Create Windows ZIP
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path dist
        Compress-Archive -Path "amberol-windows-portable\*" -DestinationPath "dist\amberol-${{ needs.prepare.outputs.version }}-windows-x86_64-portable.zip"

    - name: Setup Inno Setup
      shell: pwsh
      run: |
        # Download and install Inno Setup
        Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "innosetup.exe"
        Start-Process -FilePath "innosetup.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        
        # Add to PATH
        $env:PATH += ";C:\Program Files (x86)\Inno Setup 6"
        echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Create Windows Installer
      shell: pwsh
      run: |
        # Update version in installer script
        $issContent = Get-Content "amberol-installer.iss" -Raw
        $issContent = $issContent -replace "AppVersion=.*", "AppVersion=${{ needs.prepare.outputs.version }}"
        $issContent | Set-Content "amberol-installer.iss"
        
        # Compile installer
        & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "amberol-installer.iss"
        
        # Rename output
        Move-Item "dist\amberol-windows-installer.exe" "dist\amberol-${{ needs.prepare.outputs.version }}-windows-x86_64-installer.exe"

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: amberol-windows-release
        path: dist/

  build-flatpak:
    name: Build Flatpak Release
    runs-on: ubuntu-latest
    needs: prepare
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-45
      options: --privileged
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build Flatpak
      uses: bilelmoussaoui/flatpak-github-actions/flatpak-builder@v6
      with:
        bundle: amberol-${{ needs.prepare.outputs.version }}.flatpak
        manifest-path: io.bassi.Amberol.json
        cache-key: flatpak-builder-release-${{ github.sha }}

    - name: Upload Flatpak artifacts
      uses: actions/upload-artifact@v4
      with:
        name: amberol-flatpak-release
        path: amberol-${{ needs.prepare.outputs.version }}.flatpak

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare, build-linux, build-windows, build-flatpak]
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy Linux builds
        cp artifacts/amberol-linux-release/* release-assets/ || true
        
        # Copy Windows builds
        cp artifacts/amberol-windows-release/* release-assets/ || true
        
        # Copy Flatpak
        cp artifacts/amberol-flatpak-release/* release-assets/ || true
        
        # List files for verification
        ls -la release-assets/

    - name: Generate release notes
      id: release_notes
      run: |
        # Generate release notes from CHANGES.md or git log
        if [ -f "CHANGES.md" ]; then
          # Extract changes for this version from CHANGES.md
          awk '/^## \[?'${{ needs.prepare.outputs.version }}'\]?/,/^## \[?[0-9]/ {if (/^## \[?[0-9]/ && !/^## \[?'${{ needs.prepare.outputs.version }}'\]?/) exit; print}' CHANGES.md > release_notes.md
        else
          # Fallback to git log
          echo "## Changes in ${{ needs.prepare.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
        fi
        
        # Add download information
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Linux**: \`amberol-${{ needs.prepare.outputs.version }}-linux-x86_64.tar.gz\`" >> release_notes.md
        echo "- **Windows Installer**: \`amberol-${{ needs.prepare.outputs.version }}-windows-x86_64-installer.exe\`" >> release_notes.md
        echo "- **Windows Portable**: \`amberol-${{ needs.prepare.outputs.version }}-windows-x86_64-portable.zip\`" >> release_notes.md
        echo "- **Flatpak**: \`amberol-${{ needs.prepare.outputs.version }}.flatpak\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "For detailed Windows installation instructions, see [README-Windows.md](README-Windows.md)." >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.tag }}
        name: Amberol ${{ needs.prepare.outputs.version }}
        body_path: release_notes.md
        prerelease: ${{ needs.prepare.outputs.is_prerelease }}
        files: release-assets/*
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-flathub:
    name: Publish to Flathub
    runs-on: ubuntu-latest
    needs: [prepare, create-release]
    if: ${{ needs.prepare.outputs.is_prerelease == 'false' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update Flathub
      run: |
        echo "This step would update the Flathub repository"
        echo "For now, this is a placeholder for manual Flathub submission"
        echo "Version: ${{ needs.prepare.outputs.version }}"
        echo "Tag: ${{ needs.prepare.outputs.tag }}"